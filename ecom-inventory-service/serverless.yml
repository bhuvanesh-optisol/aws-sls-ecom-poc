# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ecom-inven-poc
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  stage: dev
  profile: default
  region: 'us-west-1'
  iam:
   role:
     statements:
       - Effect: Allow
         Action:
           - dynamodb:*
         Resource: arn:aws:dynamodb:us-west-1:441836939852:table/ProductsTable
       - Effect: Allow
         Action:
           - sqs:*
         Resource: arn:aws:sqs:us-west-1:441836939852:ecom-notification-poc-dev-MailQueue-YfMfoMxTY1SD
       - Effect: Allow
         Action:
           - events:PutRule
         Resource: arn:aws:events:us-west-1:441836939852:rule/ecom-inven-poc-dev-NotifyProductsEventsRuleSchedul-1VMHORZQXY9X7
       - Effect: Allow
         Action:
           - dynamodb:*
         Resource: arn:aws:dynamodb:us-west-1:441836939852:table/UsersTable
       - Effect: Allow
         Action:
           - dynamodb:*
         Resource: arn:aws:dynamodb:us-west-1:441836939852:table/CompanyTable
       - Effect: Allow
         Action:
           - s3:*
         Resource: "arn:aws:s3:::product-images3/*"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    ProductImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: product-images3
        # AccessControl: PublicRead
    # UploadRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2023-10-02"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: upload-policy
    #         PolicyDocument:
    #           Version: "2023-10-02"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - s3:PutObject
    #                 - s3:PutObjectAcl
    #               Resource:
    #                 !Sub
    #                   - "arn:aws:s3:::product-images/*"
    #                   - {BucketName: !Ref ModuslandBucket} 

functions:
  createProduct:
    handler: handlers/createProduct.handler
    events:
      - http:
          method: POST
          path: /create_product
  getProducts:
    handler: handlers/getProducts.handler
    events:
      - http:
          method: GET
          path: /get_products/{res_id}
  getProductsByCompany:
    handler: handlers/getProductsByCompany.handler
    events:
      - http:
          method: GET
          path: /get_products_by_company/{res_id}
  notifyProducts:
    handler: handlers/notifyCompany.handler
    # events:
    #   - schedule: rate(1 minute)
  getProductById:
    handler: handlers/getProductById.handler
    events:
      - http:
          method: GET
          path: /get_product/{id}
  updateProduct:
    handler: handlers/updateProduct.handler
    events:
      - http:
          method: PATCH
          path: /update_product/{id}
  updateQty:
      handler: handlers/updateQty.handler
      events:
        - http:
            method: PATCH
            path: /update_qty/{id}
  updateStatus:
      handler: handlers/updateStatus.handler
      events:
        - http:
            method: PATCH
            path: /update_status/{id}
  deleteProduct:
    handler: handlers/deleteProduct.handler
    events:
      - http:
          method: DELETE
          path: /delete_product/{id}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
custom:
  bundle:
    linting: false
